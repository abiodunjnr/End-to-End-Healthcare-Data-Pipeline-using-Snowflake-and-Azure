USE ROLE ACCOUNTADMIN;

-- Create Role & Warehouse
CREATE ROLE IF NOT EXISTS USER_ROLE;
CREATE WAREHOUSE IF NOT EXISTS USER_WH
  WITH WAREHOUSE_SIZE='XSMALL' AUTO_SUSPEND=60 AUTO_RESUME=TRUE INITIALLY_SUSPENDED=TRUE;
GRANT USAGE ON WAREHOUSE USER_WH TO ROLE USER_ROLE;



-- Database & Schemas
CREATE DATABASE IF NOT EXISTS PATIENT_SURVIVAL_DB;
CREATE SCHEMA IF NOT EXISTS PATIENT_SURVIVAL_SILVER;
CREATE SCHEMA IF NOT EXISTS PATIENT_SURVIVAL_GOLD;

-- Access
GRANT ROLE USER_ROLE TO USER TAdefisoye;
GRANT USAGE ON DATABASE PATIENT_SURVIVAL_DB TO ROLE USER_ROLE;
GRANT USAGE ON ALL SCHEMAS IN DATABASE PATIENT_SURVIVAL_DB TO ROLE USER_ROLE;
GRANT CREATE TABLE, CREATE VIEW, CREATE PROCEDURE, CREATE STAGE ON ALL SCHEMAS IN DATABASE PATIENT_SURVIVAL_DB TO ROLE USER_ROLE;

-- Object creation + data privileges in SILVER (now & future)
GRANT SELECT, INSERT, UPDATE, DELETE
  ON ALL TABLES IN SCHEMA PATIENT_SURVIVAL_DB.PATIENT_SURVIVAL_SILVER TO ROLE USER_ROLE;
GRANT SELECT, INSERT, UPDATE, DELETE
  ON FUTURE TABLES IN SCHEMA PATIENT_SURVIVAL_DB.PATIENT_SURVIVAL_SILVER TO ROLE USER_ROLE;



 
-- RAW landing table (for ADF Copy activity)
USE ROLE USER_ROLE;
USE WAREHOUSE USER_WH;
USE DATABASE PATIENT_SURVIVAL_DB;
USE SCHEMA PATIENT_SURVIVAL_SILVER;

-- File format for CSVs
CREATE OR REPLACE FILE FORMAT CSV_HEALTHCARE_FF
  TYPE='CSV' SKIP_HEADER=1 FIELD_OPTIONALLY_ENCLOSED_BY='"' TRIM_SPACE=TRUE  FIELD_DELIMITER = ','   NULL_IF = ('', 'NULL', '\\N')   DATE_FORMAT = 'DD/MM/YYYY';

-- Set context
USE ROLE USER_ROLE;
USE WAREHOUSE USER_WH;
USE DATABASE PATIENT_SURVIVAL_DB;
USE SCHEMA PATIENT_SURVIVAL_SILVER;


CREATE OR REPLACE STAGE AZ_HEALTHCARE_STAGE
  URL = 'xxxxxxxxxxxx'
  CREDENTIALS = ( AZURE_SAS_TOKEN = 'xxxxxxxxxxxx' )
  FILE_FORMAT = CSV_HEALTHCARE_FF;  -- attach your existing file format

-- list at container root (optional)
LIST @AZ_HEALTHCARE_STAGE;
-- list the folder where your file lives
LIST @AZ_HEALTHCARE_STAGE/staging_for_sf/;


-- Create Target Table
CREATE OR REPLACE TABLE PATIENT_ADMISSIONS (
  NAME                 VARCHAR,
  AGE                  NUMBER,            -- integers like 30, 62
  GENDER               VARCHAR,
  BLOOD_TYPE           VARCHAR,           -- A+, B-, etc.
  MEDICAL_CONDITION    VARCHAR,
  DATE_OF_ADMISSION    DATE,              -- DD/MM/YYYY
  DOCTOR               VARCHAR,
  HOSPITAL             VARCHAR,
  INSURANCE_PROVIDER   VARCHAR,
  BILLING_AMOUNT       NUMBER(18,5),      -- handles decimals like 18856.28131
  ROOM_NUMBER          NUMBER,            -- 328, 265, ...
  ADMISSION_TYPE       VARCHAR,           -- Urgent, Emergency, etc.
  DISCHARGE_DATE       DATE,              -- DD/MM/YYYY (nullable)
  MEDICATION           VARCHAR,
  TEST_RESULTS         VARCHAR
);

-- Optional: verify the table
DESC TABLE PATIENT_ADMISSIONS;

-- Visibility checks
LIST @AZ_HEALTHCARE_STAGE;
LIST @AZ_HEALTHCARE_STAGE/staging_for_sf/;

--Table preview of selected columns
SELECT $1, $2, $3, $4, $5,$6,$7
FROM @AZ_HEALTHCARE_STAGE/staging_for_sf/healthcare_dataset.csv
(FILE_FORMAT => CSV_HEALTHCARE_FF)
LIMIT 5;

-- Load this single file
COPY INTO PATIENT_ADMISSIONS
FROM @AZ_HEALTHCARE_STAGE/staging_for_sf/healthcare_dataset.csv
FILE_FORMAT = (FORMAT_NAME = CSV_HEALTHCARE_FF)
ON_ERROR = 'CONTINUE';

--- Query Validation
SELECT COUNT(*) AS row_count FROM PATIENT_ADMISSIONS;
SELECT *
FROM PATIENT_ADMISSIONS
LIMIT 15;


-- ContextDATA MASKING (run as ACCOUNTADMIN), Mask PII such as NAME and INSURANCE_PROVIDER
USE ROLE ACCOUNT_ADMIN;

-- 1) (Re)create a masking policy 

CREATE OR REPLACE MASKING POLICY MASK_IDENTITY_VARCHAR AS (v STRING) RETURNS STRING ->
  CASE
    WHEN CURRENT_ROLE() IN ('ACCOUNTADMIN','SECURITYADMIN','USER_ROLE') THEN v
    ELSE CONCAT(LEFT(v, 1), REPEAT('*', GREATEST(LENGTH(v)-2, 0)), RIGHT(v, 1))
  END;

-- Apply to sensitive columns (optional):
ALTER TABLE PATIENT_ADMISSIONS 
MODIFY COLUMN NAME SET MASKING POLICY MASK_IDENTITY_VARCHAR;
ALTER TABLE PATIENT_ADMISSIONS 
MODIFY COLUMN INSURANCE_PROVIDER SET MASKING POLICY MASK_IDENTITY_VARCHAR;



USE WAREHOUSE USER_WH;
USE DATABASE PATIENT_SURVIVAL_DB;
USE SCHEMA PATIENT_SURVIVAL_SILVER;



SELECT 
    MEDICAL_CONDITION,
    ROUND(AVG(BILLING_AMOUNT), 2) AS AVG_COST,
    ROUND(AVG(DATEDIFF(day, DATE_OF_ADMISSION, DISCHARGE_DATE)), 2) AS AVG_LOS,
    COUNT(*) AS NUM_PATIENTS,
    'Avg Billing Cost' AS SERIES
FROM PATIENT_ADMISSIONS
WHERE DISCHARGE_DATE IS NOT NULL
GROUP BY MEDICAL_CONDITION
ORDER BY AVG_COST DESC;
